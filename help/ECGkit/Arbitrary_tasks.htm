<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://www.mathworks.com/help/schema/MathWorksDocPage">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta charset="utf-8" content="" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="chunktype" content="refpage" />
<meta name="refentity" itemprop="refentity" content="function:ECGwrapper" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta name="toctype" itemprop="pagetype" content="fcn" />
<meta name="infotype" itemprop="infotype" content="ref/function" />
<meta name="description" itemprop="description" content="This MATLAB function generates a view of a MATLAB file in HTML format for sharing your code." />
<meta name="generator" content="Adobe RoboHelp 11" />
<title>Arbitrary_tasks</title>
<link rel="StyleSheet" href="merged.css" type="text/css" />
<script type="text/javascript" src="includes/product/scripts/jquery/jquery-latest.js"></script>
<script type="text/javascript" src="includes/shared/scripts/l10n.js"></script>
<script type="text/javascript" src="includes/shared/scripts/docscripts.js"></script>
<script type="text/javascript" src="includes/product/scripts/docscripts.js"></script>
<script type="text/javascript" src="includes/shared/scripts/mw.toc.js"></script>
<script type="text/javascript" src="includes/shared/scripts/mw.imagescaling.js"></script>
<script type="text/javascript" src="includes/shared/scripts/mw.imageanimation.js"></script>
<script type="text/javascript" src="includes/shared/scripts/mw.breadcrumb.js"></script>
<script type="text/javascript" src="includes/shared/scripts/jquery.highlight.js"></script>
<script type="text/javascript" src="includes/shared/scripts/nanoscroller.min.js"></script>
<script type="text/javascript" src="includes/product/scripts/jquery/jquery.tmpl.js"></script>
<script type="text/javascript" src="includes/product/scripts/jquery/jquery.tmpl.min.js"></script>
<script type="text/javascript" src="includes/product/scripts/jquery/jquery.toggleval.js"></script>
<script type="text/javascript" src="includes/product/scripts/localnav.js"></script>
<script type="text/javascript" src="includes/product/scripts/suggest.js"></script>
<script type="text/javascript">//<![CDATA[
var suggestionsObj;
            $(function() {
                var searchField = $('#docsearch');
                suggestionsObj = new Suggestions(getSuggestions, getMore, searchField);
            });
        
            function getSuggestions() {
               var text = suggestionsObj.searchField.val();
               document.location='docsuggestion:' + text;
            }

            function getMore(type) {
                var text = suggestionsObj.searchField.val();
                document.location='docsuggestion:' + type + ':' + text;
            }
//]]></script>
</head>

<body>
<div class="site_container site_toc_opened">
	<!--close_toc_pane-->
		<div class="page_container">
		<div class="content_frame">
			<div class="content_container" id="content_container">
				<br />
				
				<div itemprop="content">
					<h1 class="r2013b" itemprop="title">Arbitrary tasks</h1>
					<!-- SYNCHTO: _funcalpha.html -->
						<div class="doc_topic_desc">
						<div class="purpose_container">
							<p itemprop="purpose">This document describes 
							 how to use arbitrary tasks with the ECGkit.</p>
							<div class="switch">
								<a href="javascript:void(0);" id="expandAllPage">expand 
								 all in page</a> 
							</div>
						</div>
					</div>
				</div>
				<div itemprop="content">
					<div class="clear">
						<p>&#160;</p>
					</div>
					<div class="examples">
						<a name="Description"></a> 
						<h1 id="description1" class="r2013b">Description</h1>
						<p>Sometimes the task you need to perform on ECG 
						 signals is too simple to develop a new ECGtask, 
						 like computing some statistics, or apply a linear 
						 filter, or any type of transformation you may 
						 need to perform to the signal. For those cases 
						 you may found arbitrary tasks useful.</p>
					</div>
				</div>
				<div itemprop="content">
					<div class="clear">
						<p>&#160;</p>
					</div>
					<h1 id="inputs" class="r2013b">Input Arguments</h1>
					<div class="expandableContent">
						<div class="arguments">
							<div class="input_argument_container">
								<p>The properties that this task uses are 
								 the following:</p>
								<div class="expandableContent">
									<a name="inputarg_progress_handle"></a> 
									 
									<h3 id="input_argument_namevalue_outputdir" 
										 class="expand"><span class="argument_name"><a 
									 href="javascript:void(0);" title="Expand/Collapse" 
									 style="display: block;"><tt>progress_handle</tt> 
									 — used to track the progress within 
									 your function.</a></span><span class="example_desc"><tt>[]</tt> 
									 (default)</span></h3>
									<div class="collapse">
										<p>progress_handle, is a handle 
										 to a <a href="progress_bar.htm">progress_bar</a> 
										 object, that can be used to track 
										 the progress within your function.</p>
									</div>
								</div>
								<div class="expandableContent">
									<a name="inputarg_tmp_path"></a> 
									<h3 id="input_argument_namevalue_tmp_path" 
										 class="expand"><span><a href="javascript:void(0);" 
									 title="Expand/Collapse" style="display: block;"><span 
									 class="argument_name"><tt>tmp_path</tt> 
									 — The path to store temporary data</span></a><span 
									 class="example_desc"><tt>'tempdir()'</tt> 
									 (default)</span></span></h3>
									<div class="collapse">
										<p>Full path to a directory with 
										 write privileges.</p>
									</div>
								</div>
								<div class="expandableContent">
									<h3 id="input_argument_namevalue_outputdir" 
										 class="expand"><span><a href="javascript:void(0);" 
									 title="Expand/Collapse" style="display: block;"><span 
									 class="argument_name"><tt>only_ECG_leads</tt> 
									 — Process only ECG signals</span></a><span 
									 class="example_desc"><tt>true</tt> 
									 (default)</span></span></h3>
									<div class="collapse">
										<p>Boolean value. Find out which 
										 signals are ECG based on their 
										 header description.</p>
									</div>
								</div>
								<a name="payload_prop"></a> 
								<div class="expandableContent">
									<a name="inputarg_payload"></a> 
									<h3 id="input_argument_namevalue_payload" 
										 class="expand"><span><a href="javascript:void(0);" 
									 title="Expand/Collapse" style="display: block;"><span 
									 class="argument_name"><tt>payload</tt> 
									 — An arbitrary format variable to 
									 be passed to your user-defined algorithm.</span></a><span 
									 class="example_desc"><tt>[]</tt> (default)</span></span></h3>
									<div class="collapse">
										<p>This variable can be useful 
										 for passing data to your own function, 
										 not covered in the interface described 
										 <a href="#Adding_a_custom_detection_algorithm">below</a>.</p>
									</div>
								</div>
								<a name="signal_payload_prop"></a> 
								<div class="expandableContent">
									<h3 id="input_argument_namevalue_outputdir" 
										 class="expand"><span><a href="javascript:void(0);" 
									 title="Expand/Collapse" style="display: block;"><span 
									 class="argument_name"><tt>signal_payload</tt> 
									 — Treat the result of your arbitrary 
									 function as a signal.</span></a><span 
									 class="example_desc"><tt>false</tt> 
									 (default)</span></span></h3>
									<div class="collapse">
										<p>Boolean value that indicates 
										 the ECGwrapper to produce a signal 
										 or result payload.</p>
									</div>
								</div>
								<a name="lead_idx_prop"></a> 
								<div class="expandableContent">
									<a name="inputarg_payload"></a> 
									<h3 id="input_argument_namevalue_payload" 
										 class="expand"><span><a href="javascript:void(0);" 
									 title="Expand/Collapse" style="display: block;"><span 
									 class="argument_name"><tt>lead_idx</tt> 
									 — The signal indexes that your function 
									 will affect.</span></a><span class="example_desc"><tt>[]</tt> 
									 (default)</span></span></h3>
									<div class="collapse">
										<p>A positive integer array with 
										 values from 1 to ECG_header.nsig.</p>
									</div>
								</div>
								<a name="func_pointer_prop"></a> 
								<div class="expandableContent">
									<a name="inputarg_payload"></a> 
									<h3 id="input_argument_namevalue_payload" 
										 class="expand"><span><a href="javascript:void(0);" 
									 title="Expand/Collapse" style="display: block;"><span 
									 class="argument_name"><tt>function_pointer</tt> 
									 — The pointer to your arbitrary function.</span></a><span 
									 class="example_desc"><tt>[]</tt> (default)</span></span></h3>
									<div class="collapse">
										<p>Your function must follow this 
										 prototype:</p>
										<pre class="codeinput">
<span class="keyword">function</span> result = your_function( ECG_matrix, ECG_header, progress_handle, payload_in)	
						</pre>
										<p>where the arguments are:</p>
										<p style="margin-left: 40px;"><span 
										 style="font-weight: bold;">ECG_matrix</span>, 
										 is a matrix size [nsamp length(lead_idx)], 
										 where nsamp is handled internally 
										 by the ECG wrapper and <a href="#lead_idx_prop">lead_idx</a> 
										 property is user-defined.</p>
										<p style="margin-left: 40px;"><span 
										 style="font-weight: bold;">ECG_header</span>, 
										 is a struct with info about the 
										 ECG signal, such as:</p>
										<p style="margin-left: 80px;"><span 
										 style="font-weight: bold;">freq</span>, 
										 the sampling frequency</p>
										<p style="margin-left: 80px;"><span 
										 style="font-weight: bold;">desc</span>, 
										 description about the signals.</p>
										<p style="margin-left: 80px;">and 
										 others described <a href="Copy_of_ECGtask.htm">here</a></p>
										<p style="margin-left: 40px;"><span 
										 style="font-weight: bold;">progress_handle</span>, 
										 is a handle to a <a href="progress_bar.htm">progress_bar</a> 
										 object, that can be used to track 
										 the progress within your function.</p>
										<p style="margin-left: 40px;"><span 
										 style="font-weight: bold;">payload_in</span>, 
										 is a user variable, of arbitrary 
										 format, allowed to be sent to 
										 your function. It is sent, via 
										 the <a href="#payload_prop">payload 
										 property</a> of this class, for 
										 example:</p>
										<pre class="codeinput">
	<span class="comment">% One variable</span>
	this_ECG_wrapper.ECGtaskHandle.payload = your_variable;
	
	<span class="comment">% Several variables with a cell container</span>
	this_ECG_wrapper.ECGtaskHandle.payload = {your_var1 your_var2};	</pre>
										<p>and the output of your function 
										 must be a result (struct) variable, 
										 or can be handled as a signal 
										 with signal_payload property.</p>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div itemprop="content">
					<div class="examples">
						<h1 id="examples" class="r2013b">Examples</h1>
						<p>This example is used in the QRScorrector function 
						 to perform template-matching on an ECGwrapper 
						 (arbitrary big recording) object.</p>
						<pre class="codeinput">
aux_w = ECGwrapper(<span class="string">'recording_name'</span>, <span class="string">'your_path/recname'</span>);
aux_w.ECGtaskHandle = <span class="string">'arbitrary_function'</span>;<span class="comment">
% This is in case you want always to recalculate results, no caching</span><?rh-implicit_p ?>aux_w.cacheResults = false;<span class="comment">
% Use first and third columns-signals</span><?rh-implicit_p ?>aux_w.ECGtaskHandle.lead_idx = [1 3];<span class="comment">
% Produce a signal as a result</span><?rh-implicit_p ?>aux_w.ECGtaskHandle.signal_payload = true;<span class="comment">
% Add a user-string to identify the run</span><?rh-implicit_p ?>aux_w.ECGtaskHandle.user_string = [<span class="string">'similarity_calc_for_lead_'</span> num2str(sort(lead_idx)) ];<span class="comment">
% add your function pointer</span><?rh-implicit_p ?>aux_w.ECGtaskHandle.function_pointer = @similarity_calculation;<span class="comment">
% and any data your function may need.</span><?rh-implicit_p ?>aux_w.ECGtaskHandle.payload = pattern2detect;<?rh-implicit_p ?><span class="comment">% and you are ready to go !</span>
<?rh-implicit_p ?>aux_w.Run<span class="comment">
						</span></pre>
					</div>
				</div>
				<h1 class="r2013b">See Also</h1>
				<p><span class="comment"><a itemprop="url" href="ECGtask.html"><tt>ECGtask</tt></a> 
				 | </span><span class="comment" itemprop="seealso"><tt><a 
				 itemprop="url" href="ECGwrapper.html">ECGwrapper</a></tt></span><span 
				 class="comment"> | </span><span class="comment" itemprop="seealso"><a 
				 itemprop="url" href="examples.html"><tt>examples</tt></a></span><span 
				 class="comment"> </span></p>
			<!-- close_content_container -->
			</div>
		<!-- close_content_frame -->
		</div>
	<!--  close_page_container -->
	</div>
</div>
<!--  close_site_container -->


</body>
</html>
